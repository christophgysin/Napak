var $e8533b7de9e20668b68cf7d8ce71a1d1$exports = {};
$parcel$require("e8533b7de9e20668b68cf7d8ce71a1d1", "/js/shared/helpers.js");
$parcel$require("e8533b7de9e20668b68cf7d8ce71a1d1", "/js/shared/globals.js");

class $e8533b7de9e20668b68cf7d8ce71a1d1$export$default {
  constructor(params) {
    this.selected = false;
    this.targetObj = params.targetObj;
    let pickerElement = $e8533b7de9e20668b68cf7d8ce71a1d1$import$dce({
      el: 'UL',
      cssClass: params.cssClass,
      id: params.id
    });

    for (let i = 0, j = params.options.length; i < j; i++) {
      let option = $e8533b7de9e20668b68cf7d8ce71a1d1$import$dce({
        el: 'LI'
      });

      if (params.options[i].selected) {
        option.classList.add('selected');
        this.selected = params.options[i];
        $e8533b7de9e20668b68cf7d8ce71a1d1$import$globals[params.targetObj] = params.options[i].value;
      }

      let optionLink = $e8533b7de9e20668b68cf7d8ce71a1d1$import$dce({
        el: 'A'
      });
      optionLink.value = params.options[i].value;
      let optionLinkText = $e8533b7de9e20668b68cf7d8ce71a1d1$import$dce({
        el: 'SPAN',
        cssClass: 'menu-title',
        content: params.options[i].title
      });
      let temp = params.options[i];
      optionLink.addEventListener('click', () => {
        this.set(optionLink, temp);
      }, false);
      optionLink.appendChild(optionLinkText); // Legends tag

      let legensHolder = $e8533b7de9e20668b68cf7d8ce71a1d1$import$dce({
        el: 'SPAN',
        cssClass: 'legends-holder'
      });
      let legendTag = $e8533b7de9e20668b68cf7d8ce71a1d1$import$dce({
        el: 'SPAN',
        cssClass: "legend type-".concat(params.options[i].value),
        content: params.options[i].legend ? params.options[i].legend : ''
      });
      legendTag.value = params.options[i].val;
      legensHolder.appendChild(legendTag);
      optionLink.appendChild(legensHolder); // update legends

      let updateLegends = () => {
        let val = legendTag.value;

        if (val) {
          let count = val.split('.').reduce((o, i) => o[i], $e8533b7de9e20668b68cf7d8ce71a1d1$import$globals);
          legendTag.innerHTML = count ? count : '';
        }
      };

      $e8533b7de9e20668b68cf7d8ce71a1d1$import$globals.storeObservers.push({
        key: 'indoorsOutdoors',
        callback: updateLegends
      });
      $e8533b7de9e20668b68cf7d8ce71a1d1$import$globals.storeObservers.push({
        key: 'ticks',
        callback: updateLegends
      });
      option.appendChild(optionLink);
      pickerElement.appendChild(option);
    }

    this.render = () => {
      return pickerElement;
    };

    this.set = (el, data) => {
      $e8533b7de9e20668b68cf7d8ce71a1d1$import$globals[params.targetObj] = el.value;
      let container = el.parentNode.parentNode;
      let selectedItem = container.querySelector('.selected');
      selectedItem.classList.remove('selected');
      el.parentNode.classList.add('selected');
      this.selected = data;

      if (params.callback) {
        params.callback();
      }
    };
  }

}

$e8533b7de9e20668b68cf7d8ce71a1d1$exports.default = $e8533b7de9e20668b68cf7d8ce71a1d1$export$default;