var $d2107ad03657e204b4abe7091e6661$exports = {};
$parcel$require("69d2107ad03657e204b4abe7091e6661", "/js/shared/globals.js");

function $d2107ad03657e204b4abe7091e6661$var$ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function $d2107ad03657e204b4abe7091e6661$var$_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { $d2107ad03657e204b4abe7091e6661$var$ownKeys(Object(source), true).forEach(function (key) { $d2107ad03657e204b4abe7091e6661$var$_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { $d2107ad03657e204b4abe7091e6661$var$ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function $d2107ad03657e204b4abe7091e6661$var$_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Create DOM element
let $d2107ad03657e204b4abe7091e6661$export$dce = params => {
  let element = document.createElement(params.el);

  if (params.cssClass) {
    element.className = params.cssClass;
  }

  if (params.source) {
    element.setAttribute('src', params.source);
  }

  if (params.cssStyle) {
    element.setAttribute('style', params.cssStyle);
  }

  if (params.id) {
    element.setAttribute('id', params.id);
  }

  if (params.content) {
    element.appendChild(document.createTextNode(params.content));
  }

  if (params.attrbs) {
    for (let i = 0, j = params.attrbs.length; i < j; i++) {
      element.setAttribute(params.attrbs[i][0], params.attrbs[i][1]);
    }
  }

  return element;
}; // Create SVG element


let $d2107ad03657e204b4abe7091e6661$export$svg = params => {
  let xlmns = 'http://www.w3.org/2000/svg';
  let element = document.createElementNS(xlmns, params.el);

  if (params.cssClass) {
    element.className = params.cssClass;
  }

  if (params.cssStyle) {
    element.setAttribute('style', params.cssStyle);
  }

  if (params.id) {
    element.setAttribute('id', params.id);
  }

  if (params.attrbs) {
    for (let i = 0, j = params.attrbs.length; i < j; i++) {
      element.setAttributeNS(null, params.attrbs[i][0], params.attrbs[i][1]);
    }
  }

  return element;
}; // vibrate


let $d2107ad03657e204b4abe7091e6661$export$vibrate = params => {
  let supportsVibrate = "vibrate" in navigator;
  let duration = [10, 0];

  if (params && params.duration) {
    duration = params.duration;
  }

  if (supportsVibrate) {
    window.navigator.vibrate(duration);
  }
}; // Custom events


let $d2107ad03657e204b4abe7091e6661$export$triggerCustomEvent = params => {
  let vent = new CustomEvent(params.vent, params.data);

  if (params.dispatch) {
    document.dispatchEvent(vent);
  }
}; // Count top 5 score


let $d2107ad03657e204b4abe7091e6661$export$countTopFive = () => {
  return $d2107ad03657e204b4abe7091e6661$export$countTotalScore().reduce((a, b) => Number(a) + Number(b), 0);
}; // Count average grade


let $d2107ad03657e204b4abe7091e6661$export$averageGrade = amount => {
  let ticks = $d2107ad03657e204b4abe7091e6661$export$handleScopeTicks({
    scope: $d2107ad03657e204b4abe7091e6661$import$globals.scope
  });
  let maxGrades = [];
  ticks.forEach(tick => {
    maxGrades.push(tick.grade);
  });
  if (maxGrades.length < 1) return 'N/A';
  maxGrades = maxGrades.sort(function (a, b) {
    return b - a;
  }).slice(0, 5);
  maxGrades = maxGrades.reduce((a, b) => Number(a) + Number(b), 0);
  let avgr = maxGrades / amount;
  return $d2107ad03657e204b4abe7091e6661$import$globals.grades.font[Math.round(avgr)];
}; // Total score


let $d2107ad03657e204b4abe7091e6661$export$countTotalScore = () => {
  let ticks = $d2107ad03657e204b4abe7091e6661$export$handleScopeTicks({
    scope: $d2107ad03657e204b4abe7091e6661$import$globals.scope
  });
  let score = [0, 0, 0, 0, 0];
  ticks.forEach(tick => {
    score.push($d2107ad03657e204b4abe7091e6661$var$eightaNuScore({
      'type': tick.ascentType,
      grade: tick.grade,
      sport: tick.type
    }));
  });
  return score.sort(function (a, b) {
    return b - a;
  }).slice(0, 5);
};

let $d2107ad03657e204b4abe7091e6661$var$eightaNuScore = data => {
  let score = 0;
  let bonusgrade = 0;
  let ontop = 0;

  if (data.type === 'flash') {
    bonusgrade = 1;
    ontop = 3;
  }

  if (data.type === 'onsight') {
    bonusgrade = data.sport === 'boulder' ? 2 : 3; // Boulder onsight jumps two grades instead of three

    ontop = -5;
  }

  if (data.sport === 'toprope') {
    bonusgrade -= 1;
  }

  let grade = Number(data.grade) + bonusgrade;
  score = (grade + (grade >= 5 ? 3 : 1)) * 50 + ontop;
  return score;
}; // Get ascents


let $d2107ad03657e204b4abe7091e6661$export$countAscents = scope => {
  let types = ['redpoint', 'onsight', 'flash'];
  let ascents = {
    redpoint: 0,
    onsight: 0,
    flash: 0,
    total: 0
  };
  let ticks = $d2107ad03657e204b4abe7091e6661$export$handleScopeTicks({
    scope: scope
  });
  types.forEach(type => {
    let ticksByDiscipline = ticks.filter(obj => {
      return obj.ascentType === type && obj.type === $d2107ad03657e204b4abe7091e6661$import$globals.currentClimbingType && obj.indoorsOutdoors === $d2107ad03657e204b4abe7091e6661$import$globals.indoorsOutdoors;
    });
    ascents[type] = ticksByDiscipline.length;
    ascents.total += ticksByDiscipline.length;
  });
  return ascents;
}; // Get ascents by difficulty


let $d2107ad03657e204b4abe7091e6661$export$countAscentsByDifficulty = () => {
  let temp = $d2107ad03657e204b4abe7091e6661$import$globals.grades.font.length;
  let tempObj = {};

  for (let i = 0, j = temp; i < j; i++) {
    tempObj[i] = 0;
  }

  let ascents = {
    redpoint: $d2107ad03657e204b4abe7091e6661$var$_objectSpread({}, tempObj),
    flash: $d2107ad03657e204b4abe7091e6661$var$_objectSpread({}, tempObj),
    onsight: $d2107ad03657e204b4abe7091e6661$var$_objectSpread({}, tempObj)
  };
  let ticks = $d2107ad03657e204b4abe7091e6661$export$handleScopeTicks({
    scope: 'today'
  });
  ticks.forEach(tick => {
    if (tick.indoorsOutdoors === $d2107ad03657e204b4abe7091e6661$import$globals.indoorsOutdoors && tick.type === $d2107ad03657e204b4abe7091e6661$import$globals.currentClimbingType) {
      if (!ascents[tick.ascentType][tick.grade]) {
        ascents[tick.ascentType][tick.grade] = 0;
      }

      ascents[tick.ascentType][tick.grade] += 1;
    }
  });
  return ascents;
}; // Get ascents by difficulty


let $d2107ad03657e204b4abe7091e6661$export$countAscentsByType = () => {
  let types = {
    boulder: 0,
    sport: 0,
    toprope: 0,
    trad: 0
  };
  let ticks = $d2107ad03657e204b4abe7091e6661$export$handleScopeTicks({
    scope: 'today',
    allTypes: true
  });
  let temp = Object.keys(types);
  temp.forEach(type => {
    let ticksByDiscipline = ticks.filter(obj => {
      return obj.type === type && obj.indoorsOutdoors === $d2107ad03657e204b4abe7091e6661$import$globals.indoorsOutdoors;
    });
    types[type] = ticksByDiscipline.length;
  });
  return types;
}; // Get ascents by grade


let $d2107ad03657e204b4abe7091e6661$export$countAscentsByGrade = params => {
  let ticks = $d2107ad03657e204b4abe7091e6661$export$handleScopeTicks({
    scope: params.scope
  });
  let ascentsByGrade = new Array($d2107ad03657e204b4abe7091e6661$import$globals.grades.font.length).fill(0);
  let type = $d2107ad03657e204b4abe7091e6661$import$globals.currentClimbingType;
  ascentsByGrade.forEach((grade, count) => {
    let ticksByGrade = ticks.filter(obj => {
      return obj.type === type && obj.indoorsOutdoors === (params.indoorsOutdoors ? params.indoorsOutdoors : $d2107ad03657e204b4abe7091e6661$import$globals.indoorsOutdoors) && obj.grade === count;
    });
    ascentsByGrade[count] = ticksByGrade.length;
  });
  return ascentsByGrade;
}; // Return all ticks matching the scope


let $d2107ad03657e204b4abe7091e6661$export$handleScopeTicks = params => {
  let fromNow;
  let fromNowArray = $d2107ad03657e204b4abe7091e6661$import$globals.today.split('-');
  let year = Number(fromNowArray[0]);
  let month = Number(fromNowArray[1]);
  let day = Number(fromNowArray[2]);

  if (params.scope === 'thirtydays') {
    month -= 1;
  }

  if (params.scope === 'year') {
    year -= 1;
  }

  if (params.scope === 'alltime') {
    year = 2000;
    month = 1;
    day = 1;
  }

  fromNow = new Date(Number(year), Number(month), Number(day)).getTime();
  let ticks = [];
  console.log(fromNow);
  $d2107ad03657e204b4abe7091e6661$import$globals.ticks.forEach(tick => {
    if (tick.date >= fromNow) {
      if (tick.type === $d2107ad03657e204b4abe7091e6661$import$globals.currentClimbingType || params.allTypes) {
        ticks.push(tick);
      }
    }
  });
  return ticks;
};

let $d2107ad03657e204b4abe7091e6661$export$updateScopeTicks = () => {
  $d2107ad03657e204b4abe7091e6661$import$globals.currentScore = $d2107ad03657e204b4abe7091e6661$export$countTotalScore();
  $d2107ad03657e204b4abe7091e6661$import$globals.totalScore = $d2107ad03657e204b4abe7091e6661$export$countTopFive();
  $d2107ad03657e204b4abe7091e6661$import$globals.totalAscentCount['today'] = $d2107ad03657e204b4abe7091e6661$export$countAscents('today').total;
  $d2107ad03657e204b4abe7091e6661$import$globals.totalAscentCount['thirtydays'] = $d2107ad03657e204b4abe7091e6661$export$countAscents('thirtydays').total;
  $d2107ad03657e204b4abe7091e6661$import$globals.totalAscentCount['year'] = $d2107ad03657e204b4abe7091e6661$export$countAscents('year').total;
  $d2107ad03657e204b4abe7091e6661$import$globals.totalAscentCount['alltime'] = $d2107ad03657e204b4abe7091e6661$export$countAscents('alltime').total;
  $d2107ad03657e204b4abe7091e6661$import$globals.totalAscents = $d2107ad03657e204b4abe7091e6661$export$countAscents('today'); // Trigger

  let getTicks = $d2107ad03657e204b4abe7091e6661$import$globals.ticks;
  $d2107ad03657e204b4abe7091e6661$import$globals.ticks = getTicks;
  $d2107ad03657e204b4abe7091e6661$import$globals.totalAscentsByType = $d2107ad03657e204b4abe7091e6661$export$countAscentsByType();
  $d2107ad03657e204b4abe7091e6661$import$globals.averageGrade = $d2107ad03657e204b4abe7091e6661$export$averageGrade(5);
};

let $d2107ad03657e204b4abe7091e6661$export$generateTicks = () => {
  localStorage.clear();
  let discipline = ['boulder']; //, 'sport', 'trad', 'toprope'];

  let ascentTypes = ['redpoint', 'onsight', 'flash'];
  let indoors = ['indoors', 'outdoors'];
  let ticks = [];

  for (let i = 0, j = 100; i < j; i++) {
    ticks.push({
      "type": discipline[Math.floor(discipline.length * Math.random())],
      "indoorsOutdoors": indoors[Math.floor(indoors.length * Math.random())],
      "grade": Math.round(Math.random() * 23),
      "ascentType": ascentTypes[Math.floor(ascentTypes.length * Math.random())],
      "date": new Date(2019, Math.round(Math.random() * 11), Math.round(Math.random() * 30)).getTime()
    });
  }

  localStorage.setItem('ticks', JSON.stringify(ticks));
};

let $d2107ad03657e204b4abe7091e6661$var$eivittunain = obj => {
  if ($d2107ad03657e204b4abe7091e6661$import$globals.storeObservers.findIndex(x => x.id !== obj.id)) {
    $d2107ad03657e204b4abe7091e6661$import$globals.storeObservers.push(obj);
  }
};

$d2107ad03657e204b4abe7091e6661$exports.generateTicks = $d2107ad03657e204b4abe7091e6661$export$generateTicks;
$d2107ad03657e204b4abe7091e6661$exports.updateScopeTicks = $d2107ad03657e204b4abe7091e6661$export$updateScopeTicks;
$d2107ad03657e204b4abe7091e6661$exports.handleScopeTicks = $d2107ad03657e204b4abe7091e6661$export$handleScopeTicks;
$d2107ad03657e204b4abe7091e6661$exports.countAscentsByGrade = $d2107ad03657e204b4abe7091e6661$export$countAscentsByGrade;
$d2107ad03657e204b4abe7091e6661$exports.countAscentsByType = $d2107ad03657e204b4abe7091e6661$export$countAscentsByType;
$d2107ad03657e204b4abe7091e6661$exports.countAscentsByDifficulty = $d2107ad03657e204b4abe7091e6661$export$countAscentsByDifficulty;
$d2107ad03657e204b4abe7091e6661$exports.countAscents = $d2107ad03657e204b4abe7091e6661$export$countAscents;
$d2107ad03657e204b4abe7091e6661$exports.countTotalScore = $d2107ad03657e204b4abe7091e6661$export$countTotalScore;
$d2107ad03657e204b4abe7091e6661$exports.averageGrade = $d2107ad03657e204b4abe7091e6661$export$averageGrade;
$d2107ad03657e204b4abe7091e6661$exports.countTopFive = $d2107ad03657e204b4abe7091e6661$export$countTopFive;
$d2107ad03657e204b4abe7091e6661$exports.triggerCustomEvent = $d2107ad03657e204b4abe7091e6661$export$triggerCustomEvent;
$d2107ad03657e204b4abe7091e6661$exports.vibrate = $d2107ad03657e204b4abe7091e6661$export$vibrate;
$d2107ad03657e204b4abe7091e6661$exports.svg = $d2107ad03657e204b4abe7091e6661$export$svg;
$d2107ad03657e204b4abe7091e6661$exports.dce = $d2107ad03657e204b4abe7091e6661$export$dce;