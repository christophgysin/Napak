var $ba41d50a69734b55efb58f13fb0e3b69$exports = {};
$parcel$require("ba41d50a69734b55efb58f13fb0e3b69", "/js/shared/globals.js");
$parcel$require("ba41d50a69734b55efb58f13fb0e3b69", "/js/shared/date.js");
$parcel$require("ba41d50a69734b55efb58f13fb0e3b69", "/js/shared/helpers.js");

class $ba41d50a69734b55efb58f13fb0e3b69$export$default {
  constructor() {
    let ticks = $ba41d50a69734b55efb58f13fb0e3b69$import$globals.ticks;
    let container = $ba41d50a69734b55efb58f13fb0e3b69$import$dce({
      el: 'SECTION',
      cssClass: 'page-tick'
    });
    let nakki = $ba41d50a69734b55efb58f13fb0e3b69$import$dce({
      el: 'H3',
      content: 'Ticks archive'
    });
    let ticksContainer = $ba41d50a69734b55efb58f13fb0e3b69$import$dce({
      el: 'DIV',
      cssClass: 'today tick-list'
    });
    let el = $ba41d50a69734b55efb58f13fb0e3b69$import$dce({
      el: 'TABLE'
    });
    ticks.sort(function (a, b) {
      var keyA = a.date,
          keyB = b.date; // Compare the 2 dates

      if (keyA < keyB) return -1;
      if (keyA > keyB) return 1;
      return 0;
    });
    let currentDate = "0000-00-00";

    for (let i = ticks.length - 1, j = 0; i >= j; i--) {
      let tickDate = $ba41d50a69734b55efb58f13fb0e3b69$import$handleDate({
        dateString: ticks[i].date
      });

      if (tickDate !== currentDate) {
        let headerRow = $ba41d50a69734b55efb58f13fb0e3b69$import$dce({
          el: 'TR',
          cssClass: 'header'
        });
        let headerTitle = $ba41d50a69734b55efb58f13fb0e3b69$import$dce({
          el: 'TH',
          content: $ba41d50a69734b55efb58f13fb0e3b69$import$handleDate({
            dateString: tickDate,
            dateFormat: 'yyyy-mm-dd'
          }),
          attrbs: [['colspan', 4]]
        });
        headerRow.appendChild(headerTitle);
        el.appendChild(headerRow);
        currentDate = tickDate;
      }

      let row = $ba41d50a69734b55efb58f13fb0e3b69$import$dce({
        el: 'TR'
      }); // let date = dce({el: 'TD', content: handleDate({dateString: ticks[i].date})});

      let indoors = $ba41d50a69734b55efb58f13fb0e3b69$import$dce({
        el: 'TD',
        content: ticks[i].indoorsOutdoors
      });
      let type = $ba41d50a69734b55efb58f13fb0e3b69$import$dce({
        el: 'TD',
        content: ticks[i].type
      });
      let gradeContainer = $ba41d50a69734b55efb58f13fb0e3b69$import$dce({
        el: 'TD'
      });
      let grade = $ba41d50a69734b55efb58f13fb0e3b69$import$dce({
        el: 'SPAN',
        cssClass: 'grade-legend',
        content: $ba41d50a69734b55efb58f13fb0e3b69$import$globals.grades.font[ticks[i].grade]
      });
      gradeContainer.appendChild(grade);
      let ascentType = $ba41d50a69734b55efb58f13fb0e3b69$import$dce({
        el: 'TD',
        content: ticks[i].ascentType
      });
      row.append(
      /*date,*/
      gradeContainer, ascentType, type, indoors);
      el.appendChild(row);
    }

    ticksContainer.appendChild(el);
    container.append(nakki, ticksContainer);

    this.render = () => {
      return container;
    };
  }

}

$ba41d50a69734b55efb58f13fb0e3b69$exports.default = $ba41d50a69734b55efb58f13fb0e3b69$export$default;